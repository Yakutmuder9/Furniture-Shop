{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\"; // export const fetchProducts = createAsyncThunk(\n//   \"products/fetchProducts\",\n//   async () => {\n//     const { data } = await axios.get(`products`)\n//     console.log(data)\n//     return data\n//   }\n// );\n// const productsSlice = createSlice({\n//   name: \"products\",\n//   initialState: { isLoading: true, errMess: null, productsArray: [] },\n//   reducers: {},\n//   extraReducers: {\n//     [fetchProducts.pending]: (state) => {\n//       state.isLoading = true;\n//     },\n//     [fetchProducts.fulfilled]: (state, action) => {\n//       state.isLoading = false;\n//       state.errMess = null;\n//       state.productsArray = action.payload;\n//     },\n//     [fetchProducts.rejected]: (state, action) => {\n//       state.isLoading = false;\n//       state.errMess = action.error ? action.error.message : \"Fetch failed\";\n//     },\n//   },\n// });\n// export const productsReducer = productsSlice.reducer;\n// export const getProducts = createAsyncThunk(\n//   'posts/getProducts',\n//   async (arg, { dispatch, getState, extra, requestId, signal, rejectWithValue }) => {\n//     return fetch(\n//       `https://jsonplaceholder.typicode.com/posts?_limit=${arg.limit}`\n//     ).then((res) => {\n//       if (!res.ok) {\n//         return rejectWithValue([], \"api url not found from\");\n//       }\n//       return res.json()\n//     }).catch(error => {\n//       return rejectWithValue([], error);\n//     })\n//   }\n// )\n// export const productsSlice = createSlice({\n//   name: \"check_in_remarks\",\n//   initialState: {\n//     list_remarks: [],\n//     check_in_remarks: null,\n//     status: null\n//   },\n//   reducers: {\n//     list_remarks: (state, action) => {\n//       state.remarks = action.payload\n//     },\n//     add_check_in_remarks: (state, action) => {\n//       state.check_in_remarks = action.payload\n//     }\n//   },\n//   extraReducers: {\n//     [getProducts.pending]: (state, action) => {\n//       state.status = 'loading'\n//     },\n//     [getProducts.fulfilled]: (state, { payload, meta }) => {\n//       state.list_remarks = payload\n//       state.status = 'success'\n//     },\n//     [getProducts.rejected]: (state, action) => {\n//       state.status = 'failed'\n//     },\n//   }\n// })\n// export const productsReducer = productsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios"],"sources":["C:/Users/yakut/Desktop/Portfolio/FurnitureShop/client/src/redux/features/productSlices.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n// export const fetchProducts = createAsyncThunk(\r\n//   \"products/fetchProducts\",\r\n//   async () => {\r\n//     const { data } = await axios.get(`products`)\r\n//     console.log(data)\r\n//     return data\r\n//   }\r\n// );\r\n\r\n// const productsSlice = createSlice({\r\n//   name: \"products\",\r\n//   initialState: { isLoading: true, errMess: null, productsArray: [] },\r\n//   reducers: {},\r\n//   extraReducers: {\r\n//     [fetchProducts.pending]: (state) => {\r\n//       state.isLoading = true;\r\n//     },\r\n//     [fetchProducts.fulfilled]: (state, action) => {\r\n//       state.isLoading = false;\r\n//       state.errMess = null;\r\n//       state.productsArray = action.payload;\r\n//     },\r\n//     [fetchProducts.rejected]: (state, action) => {\r\n//       state.isLoading = false;\r\n//       state.errMess = action.error ? action.error.message : \"Fetch failed\";\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const productsReducer = productsSlice.reducer;\r\n\r\n\r\n\r\n// export const getProducts = createAsyncThunk(\r\n//   'posts/getProducts',\r\n\r\n//   async (arg, { dispatch, getState, extra, requestId, signal, rejectWithValue }) => {\r\n\r\n//     return fetch(\r\n//       `https://jsonplaceholder.typicode.com/posts?_limit=${arg.limit}`\r\n//     ).then((res) => {\r\n//       if (!res.ok) {\r\n\r\n//         return rejectWithValue([], \"api url not found from\");\r\n//       }\r\n//       return res.json()\r\n//     }).catch(error => {\r\n\r\n//       return rejectWithValue([], error);\r\n\r\n//     })\r\n//   }\r\n\r\n// )\r\n\r\n// export const productsSlice = createSlice({\r\n//   name: \"check_in_remarks\",\r\n//   initialState: {\r\n//     list_remarks: [],\r\n//     check_in_remarks: null,\r\n//     status: null\r\n//   },\r\n//   reducers: {\r\n//     list_remarks: (state, action) => {\r\n//       state.remarks = action.payload\r\n//     },\r\n//     add_check_in_remarks: (state, action) => {\r\n//       state.check_in_remarks = action.payload\r\n//     }\r\n//   },\r\n//   extraReducers: {\r\n\r\n//     [getProducts.pending]: (state, action) => {\r\n\r\n//       state.status = 'loading'\r\n//     },\r\n//     [getProducts.fulfilled]: (state, { payload, meta }) => {\r\n\r\n\r\n//       state.list_remarks = payload\r\n//       state.status = 'success'\r\n//     },\r\n//     [getProducts.rejected]: (state, action) => {\r\n//       state.status = 'failed'\r\n//     },\r\n//   }\r\n// })\r\n\r\n// export const productsReducer = productsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}